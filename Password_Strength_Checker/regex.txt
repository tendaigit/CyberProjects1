#Regular expression cheatsheet

Basic Syntax

. : Any character except newline.

^ : Matches the start of a string.

$ : Matches the end of a string.

* : 0 or more repetitions of the preceding element.

+ : 1 or more repetitions of the preceding element.

? : 0 or 1 repetition of the preceding element.

{m} : Exactly m repetitions of the preceding element.

{m,n} : Matches between m and n repetitions of the preceding element.

[] : Matches any single character in brackets.

[^] : Matches any single character not in brackets.

Character Classes

\d : Matches any digit (0-9). Equivalent to [0-9].

\D : Matches any non-digit character. Equivalent to [^0-9].

\w : Matches any word character (alphanumeric or underscore). Equivalent to [a-zA-Z0-9_].

\W : Matches any non-word character. Equivalent to [^a-zA-Z0-9_].

\s : Matches any whitespace character (space, tab, newline).

\S : Matches any non-whitespace character.

Anchors

\b : Matches a word boundary (between a word character and a non-word character).

\B : Matches a non-boundary (between two word characters or two non-word characters).

\A : Matches the start of the string.

\Z : Matches the end of the string.

Grouping & Alternation

() : Capturing group, matches the expression inside the parentheses.

(?:...) : Non-capturing group, matches but does not capture.

| : Alternation, matches either the expression before or the expression after the |.

Escape Sequences

\\ : Escapes a special character.

\. : Matches a literal period (instead of any character).

\* : Matches a literal asterisk, and so on for other special characters.

Common Examples

r'\d{2,4}' : Match a number that is between 2 to 4 digits long.

r'^[a-zA-Z_]\w*$' : Match a valid Python variable name.

r'^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$' : Match an email address

Python Regex Functions (re module)

Search:

    re.search(pattern, string) : Searches for the pattern in the string.

    result = re.search(r'\d+', 'Order number is 12345')
    print(result.group())  # Output: 12345


Match:

      re.match(pattern, string) : Matches the pattern only at the beginning of the string.

      result = re.match(r'\d+', '12345 items')
      print(result.group())  # Output: 12345

Find All:

         re.findall(pattern, string) : Finds all occurrences of the pattern in the string.

         result = re.findall(r'\d+', 'Order 12345 and 67890')
         print(result)  # Output: ['12345', '67890']

Substitute:

         re.sub(pattern, replacement, string) : Replaces the occurrences of the pattern with the replacement.

         result = re.sub(r'\d+', 'X', 'Order 12345 and 67890')
         print(result)  # Output: Order X and X

Split:

        re.split(pattern, string) : Splits the string at each occurrence of the pattern

        result = re.split(r'\s+', 'Split this string    by spaces')
        print(result)  # Output: ['Split', 'this', 'string', 'by', 'spaces']

Compile:

       pattern = re.compile(r'\d+') : Compiles a regular expression pattern for reuse.

      pattern = re.compile(r'\d+')
      result = pattern.findall('Order 12345 and 67890')
      print(result)  # Output: ['12345', '67890']


